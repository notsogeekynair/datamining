"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
sapply(df, class)
df <- read.csv('project_data.csv')
dim(df)
head(df)
sapply(df, class)
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
sapply(df, function(x) sum(is.na(x)))
# Remove the columns with more than 80% of missing values
missing_percentage <- colMeans(is.na(df)) * 100
missing_percentage
# Remove the columns with more than 80% of missing values
columns_to_remove <- names(colMeans(is.na(df))[colMeans(is.na(df)) > 0.8])
columns_to_remove
df <- df[, !names(df) %in% columns_to_remove]
dim(df)
# Remove the columns with more than 80% of missing values
columns_to_remove <- names(which(colMeans(is.na(df)) > 0.8))
columns_to_remove
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
# DATA CLEANING
# Check for duplicate rows
cat("Number of duplicate rows:", nrow(df[duplicated(df), ]))
# Check the number of missing values in each column
sapply(df, function(x) sum(is.na(x)))
# Remove the columns with more than 80% of missing values
columns_to_remove <- names(which(colMeans(is.na(df)) > 0.8))
columns_to_remove
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
# DATA CLEANING
# Check for duplicate rows
cat("Number of duplicate rows:", nrow(df[duplicated(df), ]))
# Check the number of missing values in each column
sapply(df, function(x) sum(is.na(x)))
# Remove the columns with more than 80% of missing values
drop_columns <- names(which(colMeans(is.na(df)) > 0.8))
drop_columns
df <- df[, !names(df) %in% drop_columns]
dim(df)
sapply(df, function(x) sum(is.na(x)))
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
# DATA CLEANING
# Check for duplicate rows
cat("Number of duplicate rows:", nrow(df[duplicated(df), ]))
# Check the number of missing values in each column
sapply(df, function(x) sum(is.na(x)))
# Remove the columns with more than 80% of missing values
drop_columns <- names(which(colMeans(is.na(df)) > 0.8))
drop_columns
df <- df[, !names(df) %in% drop_columns]
dim(df)
sapply(df, function(x) sum(is.na(x)))
# Impute missing values in factor columns with mode
calculate_mode <- function(x) {
unique_val <- unique(x[!is.na(x)])
unique_val[which.max(tabulate(match(x, unique_val)))]
}
factor_columns <- sapply(df, is.factor)
df[factor_columns] <- lapply(df[factor_columns], function(col) {
if (any(is.na(col))) {
mode_value <- calculate_mode(col)
col[is.na(col)] <- mode_value
}
return(col)
})
sapply(df, function(x) sum(is.na(x)))
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
# DATA CLEANING
# Check for duplicate rows
cat("Number of duplicate rows:", nrow(df[duplicated(df), ]))
# Check the number of missing values in each column
sapply(df, function(x) sum(is.na(x)))
# Remove the columns with more than 80% of missing values
drop_columns <- names(which(colMeans(is.na(df)) > 0.8))
drop_columns
df <- df[, !names(df) %in% drop_columns]
dim(df)
sapply(df, function(x) sum(is.na(x)))
# Impute missing values in factor columns with mode
calculate_mode <- function(x) {
unique_val <- unique(x[!is.na(x)])
unique_val[which.max(tabulate(match(x, unique_val)))]
}
factor_columns <- sapply(df, is.factor)
df[factor_columns] <- lapply(df[factor_columns], function(col) {
if (any(is.na(col))) {
mode_value <- calculate_mode(col)
col[is.na(col)] <- mode_value
}
return(col)
})
sapply(df, function(x) sum(is.na(x)))
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
# DATA CLEANING
# Check for duplicate rows
cat("Number of duplicate rows:", nrow(df[duplicated(df), ]))
# Check the number of missing values in each column
sapply(df, function(x) sum(is.na(x)))
# Remove the columns with more than 80% of missing values
drop_columns <- names(which(colMeans(is.na(df)) > 0.8))
drop_columns
df <- df[, !names(df) %in% drop_columns]
dim(df)
sapply(df, function(x) sum(is.na(x)))
# Impute missing values in factor columns with mode
calculate_mode <- function(x) {
unique_val <- unique(x[!is.na(x)])
unique_val[which.max(tabulate(match(x, unique_val)))]
}
factor_columns <- sapply(df, is.factor)
df[factor_columns] <- lapply(df[factor_columns], function(col) {
if (any(is.na(col))) {
mode_value <- calculate_mode(col)
col[is.na(col)] <- mode_value
}
return(col)
})
sapply(df, function(x) sum(is.na(x)))
# Impute missing values in numeric columns with median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- lapply(df[numeric_columns], function(col) {
if (any(is.na(col))) {
median_value <- calculate_median(col)
col[is.na(col)] <- median_value
}
return(col)
})
sapply(df, function(x) sum(is.na(x)))
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
# DATA CLEANING
nearZeroVar(df, names = TRUE)
# DATA CLEANING
library(caret)
# DATA CLEANING
install.packages("caret")
library(caret)
nearZeroVar(df, names = TRUE)
create_histogram(df, "DIVISION")
create_barplot(df, "DIVISION")
df$DIVISION
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
create_histogram(df, "DIVISION")
# Number of unique values in the 'DIVISION' column
num_unique_values <- length(unique(df$DIVISION))
cat("Number of unique values in 'DIVISION':", num_unique_values, "\n")
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
num_unique_values <- length(unique(df$DIVISION))
cat("Number of unique values in 'DIVISION':", num_unique_values, "\n")
nearZeroVar(df, names = TRUE)
num_unique_values <- length(unique(df$REGION))
cat("Number of unique values in 'DIVISION':", num_unique_values, "\n")
num_unique_values <- length(unique(df$SSP))
cat("Number of unique values in 'DIVISION':", num_unique_values, "\n")
f$SSP
df$SSP
freq_table <- sort(table(df$SSP), decreasing = TRUE)
# Frequency ratio (most common / second most common)
freq_ratio <- freq_table[1] / freq_table[2]
cat("Frequency Ratio:", freq_ratio, "\n")
unique_percentage <- (length(unique(df$SSP)) / nrow(df)) * 100
cat("Unique Value Percentage:", unique_percentage, "%\n")
df <- read.csv('project_data.csv')
dim(df)
head(df)
# DATA TYPES CORRECTION
# Check the current data type of each variable
sapply(df, class)
# Convert integer variables in int_to_factor to factors
int_to_factor <- c("DIVISION", "PUMA", "REGION",
"STATE", "ADJINC", "CIT", "COW", "ENG",
"FER", "GCL", "GCM", "GCR", "HIMRKS",
"HINS1", "HINS2", "HINS3", "HINS4",
"HINS5", "HINS6", "HINS7", "JWTRNS",
"LANX", "MAR", "MARHD", "MARHM", "MARHT",
"MARHW", "MIG", "MIL", "MLPA", "MLPB", "MLPCD",
"MLPE", "MLPFG", "MLPH", "MLPIK", "MLPJ", "NWAB",
"NWAV", "NWLA", "NWLK", "NWRE", "SCH", "SCHG",
"SCHL", "SEX", "WRK", "ANC", "ANC1P", "ANC2P",
"DECADE", "DRIVESP", "ESP", "ESR", "FOD1P", "FOD2P",
"HICOV", "HISP", "INDP", "JWAP", "JWDP", "LANP", "MIGPUMA",
"MIGSP", "MSP", "NATIVITY", "NOP", "OC", "OCCP", "PAOC",
"POBP", "POWPUMA", "POWSP", "PRIVCOV", "PUBCOV", "QTRBIR",
"RAC1P", "RAC2P", "RAC3P", "RACAIAN", "RACASN", "RACBLK",
"RACNH", "RACNUM", "RACPI", "RACSOR", "RACWHT", "RC", "SCIENGP",
"SCIENGRLP", "SFN", "SFR", "VPS", "WAOB", "Class")
df[int_to_factor] <- lapply(df[int_to_factor], as.factor)
# Convert integer variables in int_to_numeric to numeric
int_to_numeric <- sapply(df, is.integer)
df[int_to_numeric] <- lapply(df[int_to_numeric], as.numeric)
sapply(df, class)
# DATA CLEANING
# Check for near zero variance variables
install.packages("caret")
library(caret)
low_var_col <- nearZeroVar(df, names = TRUE)
df <- df[, !(names(df) %in% low_var_col)]
dim(df)
install.packages("caret")
# Check for duplicate rows
cat("Number of duplicate rows:", nrow(df[duplicated(df), ]))
# Check the number of missing values in each column
sapply(df, function(x) sum(is.na(x)))
# Remove the columns with more than 80% of missing values
drop_columns <- names(which(colMeans(is.na(df)) > 0.8))
drop_columns
df <- df[, !names(df) %in% drop_columns]
dim(df)
sapply(df, function(x) sum(is.na(x)))
# Impute missing values in factor columns with mode
calculate_mode <- function(x) {
unique_val <- unique(x[!is.na(x)])
unique_val[which.max(tabulate(match(x, unique_val)))]
}
factor_columns <- sapply(df, is.factor)
df[factor_columns] <- lapply(df[factor_columns], function(col) {
if (any(is.na(col))) {
mode_value <- calculate_mode(col)
col[is.na(col)] <- mode_value
}
return(col)
})
sapply(df, function(x) sum(is.na(x)))
# Impute missing values in numeric columns with median
calculate_median <- function(x) {
median(x, na.rm = TRUE)
}
numeric_columns <- sapply(df, is.numeric)
df[numeric_columns] <- lapply(df[numeric_columns], function(col) {
if (any(is.na(col))) {
median_value <- calculate_median(col)
col[is.na(col)] <- median_value
}
return(col)
})
sapply(df, function(x) sum(is.na(x)))
dim(df)
# OUTLIERS HANDLING
# Visualize numeric data with boxplots
df_long <- melt(df[, numeric_columns])
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplots for Numeric Columns", x = "Variables", y = "Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 100000)) +  # Adjust the range based on your data
theme_minimal() +
labs(title = "Boxplots for Numeric Columns (Capped Y-Axis)",
x = "Variables",
y = "Values (Capped at 100,000)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot(outlier.shape = NA) +  # Hide extreme outliers
scale_y_log10() +                   # Apply log scale to y-axis
theme_minimal() +
labs(title = "Boxplots for Numeric Columns (Log Scale)",
x = "Variables",
y = "Log-Scaled Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplots for Numeric Columns", x = "Variables", y = "Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_long, aes(x = variable, y = value, fill = variable)) +
geom_boxplot(outlier.shape = NA) +  # Hide extreme outliers
scale_y_log10() +                   # Apply log scale to y-axis
theme_minimal() +
labs(title = "Boxplots for Numeric Columns (Log Scale)",
x = "Variables",
y = "Log-Scaled Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
